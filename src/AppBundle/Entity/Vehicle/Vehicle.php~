<?php

namespace AppBundle\Entity\Vehicle;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Entity(repositoryClass="AppBundle\Repository\VehicleRepository")
 * @ORM\Table(name="vehicles")
 */
class Vehicle
{
    /**
     * @ORM\Column(type="integer", name="vehicleId")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $vehicleId;

    /**
     * @ORM\OneToMany(targetEntity="Tachograph", mappedBy="vehicle")
     */
    private $tachographs;

    /**
     * @ORM\OneToMany(targetEntity="Insurance", mappedBy="vehicle")
     */
    private $insurances;

    /**
     * @ORM\OneToMany(targetEntity="KmRead", mappedBy="vehicle")
     */
    private $kmReads;

    /**
     * @ORM\OneToMany(targetEntity="Unavailability", mappedBy="vehicle")
     */
    private $unavailabilities;

    /**
     * @ORM\OneToMany(targetEntity="CarTax", mappedBy="vehicle")
     */
    private $carTaxes;

    /**
     * @ORM\OneToMany(targetEntity="CarReview", mappedBy="vehicle")
     */
    private $carReviews;

    /**
     * @ORM\Column(type="string", length=10, nullable=false, name="plate")
     * @Assert\NotBlank(message="Plate cannot be null")
     * @Assert\Length(max=10, maxMessage="Plate too long. Max 10 chars")
     */
    private $plate;

    /**
     * @ORM\Column(type="string", length=10, nullable=true, name="exPlate")
     * @Assert\Length(max=10, maxMessage="Ex Plate too long. Max 10 chars")
     */
    private $exPlate;

    /**
     * @ORM\Column(type="datetime", nullable=false, name="carRegistrationDate")
     * @Assert\NotBlank(message="Car Registration Date cannot be null")
     */
    private $carRegistrationDate;

    /**
     * @ORM\Column(type="string", nullable=false, length=64, name="carRegistrationNumber")
     * @Assert\NotBlank(message="Car Registration Number cannot be null")
     * @Assert\Length(max=64, maxMessage="Car Registration Number is too long. Max 64 chars")
     */
    private $carRegistrationNumber;

    /**
     * @ORM\Column(type="datetime", nullable=false, name="registrationCardDate")
     * @Assert\NotBlank(message="Registration Card Date must not be null")
     */
    private $registrationCardDate;

    /**
     * @ORM\Column(type="string", length=64, nullable=false, name="brand")
     * @Assert\NotBlank(message="Vehicle's brand cannot be null")
     * @Assert\Length(max=64, maxMessage="Brand too long. Max 64 chars")
     */
    private $brand;

    /**
     * @ORM\Column(type="string", length=255, nullable=false, name="model")
     * @Assert\NotBlank(message="Vehicle's model cannot be null")
     */
    private $model;

    /**
     * @ORM\Column(type="integer", nullable=false, length=3, name="seats")
     * @Assert\NotBlank(message="Seats cannot be null")
     * @Assert\Length(max=3, maxMessage="A Vehichle cannot have more than 999 seats")
     */
    private $seats;

    /**
     * @ORM\Column(type="integer", nullable=false, length=3, name="stands")
     * @Assert\NotBlank(message="Stands cannot be null")
     * @Assert\Length(max=3, maxMessage="A Vehichle cannot have more than 999 stands")
     */
    private $stands;

    /**
     * @ORM\Column(type="decimal", precision=10, scale=2, nullable=false, name="width")
     * @Assert\NotBlank(message="Vehicle's width cannot be null")
     */
    private $width;

    /**
     * @ORM\Column(type="decimal", precision=10, scale=2, nullable=false, name="length")
     * @Assert\NotBlank(message="Vehicle's length cannot be null")
     */
    private $length;

    /**
     * @ORM\Column(type="string", nullable=true, length=128, name="financing")
     */
    private $financing;

    /**
     * @ORM\Column(type="datetime", nullable=false, name="purchaseDate")
     * @Assert\NotBlank(message="Purchase Date cannot be null")
     */
    private $purchaseDate;

    /**
     * @ORM\Column(type="datetime", nullable=true, name="saleDate")
     */
    private $saleDate;

    /**
     * @ORM\Column(type="string", length=64, nullable=false, name="useTypology")
     * @Assert\NotBlank(message="Use Typology cannot be null")
     */
    private $useTypology;

    /**
     * @ORM\Column(type="string", nullable=false, length=128, name="useDestination")
     * @Assert\NotBlank(message="Use Destination must not be null")
     * @Assert\Length(max=128, maxMessage="Use Destination too long. Max 128 chars")
     */
    private $useDestination;

    /**
     * @ORM\Column(type="string", length=64, nullable=true, name="bodyWork")
     */
    private $bodyWork;

    /**
     * @ORM\Column(type="string", length=20, nullable=false, name="frame")
     * @Assert\NotBlank(message="Vehicle's frame cannot be null")
     * @Assert\Length(max=20, maxMessage="Vehicle's frame too long. Max 20 chars")
     */
    private $frame;

    /**
     * @ORM\Column(type="string", nullable=false, length=255, name="owner")
     * @Assert\NotBlank(message="Vehicle's Owner must not be null")
     */
    private $owner;

    /**
     * @ORM\Column(type="string", length=20, nullable=false, name="transmission")
     * @Assert\NotBlank(message="Vehicle's Transmission cannot be null")
     * @Assert\Length(max=20, maxMessage="Vehicle's Transmission is too long. Max 20 chars")
     */
    private $transmission;

    /**
     * @ORM\Column(type="string", length=64, nullable=true, name="tires")
     * @Assert\Length(max=64, maxMessage="Tires field is too long. Max 64 chars")
     */
    private $tires;

    /**
     * @ORM\Column(type="string", length=64, nullable=true, name="alternateTires")
     * @Assert\Length(max=64, maxMessage="Alternate Tires field is too long. Max 64 chars")
     */
    private $alternateTires;

    /**
     * @ORM\Column(type="string", length=64, nullable=true, name="regionalAuthorization")
     */
    private $regionalAuthorization;

    /**
     * @ORM\Column(type="string", length=32, nullable=true, name="areation")
     */
    private $areation;

    /**
     * @ORM\Column(type="decimal", precision=10, scale=2, nullable=false, name="passengersSeated")
     * @Assert\NotBlank(message="Seated Passengers cannot be null")
     */
    private $passengersSeated;

    /**
     * @ORM\Column(type="decimal", precision=10, scale=2, nullable=false, name="passengersStanding")
     * @Assert\NotBlank(message="Standing Passengers cannot be null")
     */
    private $passengersStanding;

    /**
     * @ORM\Column(type="integer", length=1, nullable=false, name="emergencyExits")
     * @Assert\NotBlank(message="Emergency exits cannot be null")
     * @Assert\Length(max=1, maxMessage="There cannot be more than 9 emergency exits")
     */
    private $emergencyExits;

    /**
     * @ORM\Column(type="string", length=32, nullable=false, name="engineNumber")
     * @Assert\NotBlank(message="Engine Number cannot be null")
     */
    private $engineNumber;

    /**
     * @ORM\Column(type="string", nullable=false, length=24, name="omologationNumber")
     * @Assert\NotBlank(message="Omologation Number cannot be null")
     * @Assert\Length(max=24, maxMessage="Omologation Number is too long. Max 24 chars")
     */
    private $omologationNumber;

    /**
     * @ORM\Column(type="decimal", precision=10, scale=2, name="maximumloadMass", nullable=false)
     * @Assert\NotBlank(message="Maximum Load Mass cannot be null")
     */
    private $maximumLoadMass;

    /**
     * @ORM\Column(type="string", length=24, nullable=true, name="category")
     * @Assert\Length(max=24, maxMessage="Vehicle's category is too long. Max 24 chars allowed")
     */
    private $category;

    /**
     * @ORM\Column(type="integer", length=1, nullable=false, name="axesNumber")
     * @Assert\NotBlank(message="Axes Number cannot be null")
     * @Assert\Length(max=1, maxMessage="There cannot be more than 9 axes on a vehicle")
     */
    private $axesNumber;

    /**
     * @ORM\Column(type="integer", nullable=false, length=5, name="engineCapacity")
     * @Assert\NotBlank(message="Engine Capacity cannot be null")
     * @Assert\Length(max=5, maxMessage="Engine Capacity cannot be over 99999")
     */
    private $engineCapacity;

    /**
     * @ORM\Column(type="integer", nullable=false, length=5, name="powerKw")
     * @Assert\NotBlank(message="Power KW cannot be null")
     * @Assert\Length(max=5, maxMessage="Power KW cannot be more than 99999")
     */
    private $powerKw;

    /**
     * @ORM\Column(type="string", nullable=false, length=32, name="fuel")
     * @Assert\NotBlank(message="Fuel Type cannot be null")
     * @Assert\Length(max=32, maxMessage="Fuel cannot be longer than 32 chars")
     */
    private $fuel;

    /**
     * @ORM\Column(type="string", length=128, nullable=true, name="fireExtinguisherNumber")
     */
    private $fireExtinguisherNumber;

    /**
     * @ORM\Column(type="datetime", nullable=true, name="fireExtinguisherExpiration")
     */
    private $fireExtinguisherExpiration;

    /**
     * @ORM\Column(type="string", length=255, nullable=true, name="notes")
     */
    private $notes;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->tachographs = new \Doctrine\Common\Collections\ArrayCollection();
        $this->insurances = new \Doctrine\Common\Collections\ArrayCollection();
        $this->carTaxes = new \Doctrine\Common\Collections\ArrayCollection();
        $this->carReviews = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Get vehicleId
     *
     * @return integer
     */
    public function getVehicleId()
    {
        return $this->vehicleId;
    }

    /**
     * Set plate
     *
     * @param string $plate
     *
     * @return Vehicle
     */
    public function setPlate($plate)
    {
        $this->plate = $plate;

        return $this;
    }

    /**
     * Get plate
     *
     * @return string
     */
    public function getPlate()
    {
        return $this->plate;
    }

    /**
     * Set exPlate
     *
     * @param string $exPlate
     *
     * @return Vehicle
     */
    public function setExPlate($exPlate)
    {
        $this->exPlate = $exPlate;

        return $this;
    }

    /**
     * Get exPlate
     *
     * @return string
     */
    public function getExPlate()
    {
        return $this->exPlate;
    }

    /**
     * Set carRegistrationDate
     *
     * @param \DateTime $carRegistrationDate
     *
     * @return Vehicle
     */
    public function setCarRegistrationDate($carRegistrationDate)
    {
        $this->carRegistrationDate = $carRegistrationDate;

        return $this;
    }

    /**
     * Get carRegistrationDate
     *
     * @return \DateTime
     */
    public function getCarRegistrationDate()
    {
        return $this->carRegistrationDate;
    }

    /**
     * Set carRegistrationNumber
     *
     * @param string $carRegistrationNumber
     *
     * @return Vehicle
     */
    public function setCarRegistrationNumber($carRegistrationNumber)
    {
        $this->carRegistrationNumber = $carRegistrationNumber;

        return $this;
    }

    /**
     * Get carRegistrationNumber
     *
     * @return string
     */
    public function getCarRegistrationNumber()
    {
        return $this->carRegistrationNumber;
    }

    /**
     * Set registrationCardDate
     *
     * @param \DateTime $registrationCardDate
     *
     * @return Vehicle
     */
    public function setRegistrationCardDate($registrationCardDate)
    {
        $this->registrationCardDate = $registrationCardDate;

        return $this;
    }

    /**
     * Get registrationCardDate
     *
     * @return \DateTime
     */
    public function getRegistrationCardDate()
    {
        return $this->registrationCardDate;
    }

    /**
     * Set brand
     *
     * @param string $brand
     *
     * @return Vehicle
     */
    public function setBrand($brand)
    {
        $this->brand = $brand;

        return $this;
    }

    /**
     * Get brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->brand;
    }

    /**
     * Set model
     *
     * @param string $model
     *
     * @return Vehicle
     */
    public function setModel($model)
    {
        $this->model = $model;

        return $this;
    }

    /**
     * Get model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->model;
    }

    /**
     * Set seats
     *
     * @param integer $seats
     *
     * @return Vehicle
     */
    public function setSeats($seats)
    {
        $this->seats = $seats;

        return $this;
    }

    /**
     * Get seats
     *
     * @return integer
     */
    public function getSeats()
    {
        return $this->seats;
    }

    /**
     * Set stands
     *
     * @param integer $stands
     *
     * @return Vehicle
     */
    public function setStands($stands)
    {
        $this->stands = $stands;

        return $this;
    }

    /**
     * Get stands
     *
     * @return integer
     */
    public function getStands()
    {
        return $this->stands;
    }

    /**
     * Set width
     *
     * @param string $width
     *
     * @return Vehicle
     */
    public function setWidth($width)
    {
        $this->width = $width;

        return $this;
    }

    /**
     * Get width
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->width;
    }

    /**
     * Set length
     *
     * @param string $length
     *
     * @return Vehicle
     */
    public function setLength($length)
    {
        $this->length = $length;

        return $this;
    }

    /**
     * Get length
     *
     * @return string
     */
    public function getLength()
    {
        return $this->length;
    }

    /**
     * Set financing
     *
     * @param string $financing
     *
     * @return Vehicle
     */
    public function setFinancing($financing)
    {
        $this->financing = $financing;

        return $this;
    }

    /**
     * Get financing
     *
     * @return string
     */
    public function getFinancing()
    {
        return $this->financing;
    }

    /**
     * Set purchaseDate
     *
     * @param \DateTime $purchaseDate
     *
     * @return Vehicle
     */
    public function setPurchaseDate($purchaseDate)
    {
        $this->purchaseDate = $purchaseDate;

        return $this;
    }

    /**
     * Get purchaseDate
     *
     * @return \DateTime
     */
    public function getPurchaseDate()
    {
        return $this->purchaseDate;
    }

    /**
     * Set saleDate
     *
     * @param \DateTime $saleDate
     *
     * @return Vehicle
     */
    public function setSaleDate($saleDate)
    {
        $this->saleDate = $saleDate;

        return $this;
    }

    /**
     * Get saleDate
     *
     * @return \DateTime
     */
    public function getSaleDate()
    {
        return $this->saleDate;
    }

    /**
     * Set useTypology
     *
     * @param string $useTypology
     *
     * @return Vehicle
     */
    public function setUseTypology($useTypology)
    {
        $this->useTypology = $useTypology;

        return $this;
    }

    /**
     * Get useTypology
     *
     * @return string
     */
    public function getUseTypology()
    {
        return $this->useTypology;
    }

    /**
     * Set useDestination
     *
     * @param string $useDestination
     *
     * @return Vehicle
     */
    public function setUseDestination($useDestination)
    {
        $this->useDestination = $useDestination;

        return $this;
    }

    /**
     * Get useDestination
     *
     * @return string
     */
    public function getUseDestination()
    {
        return $this->useDestination;
    }

    /**
     * Set bodyWork
     *
     * @param string $bodyWork
     *
     * @return Vehicle
     */
    public function setBodyWork($bodyWork)
    {
        $this->bodyWork = $bodyWork;

        return $this;
    }

    /**
     * Get bodyWork
     *
     * @return string
     */
    public function getBodyWork()
    {
        return $this->bodyWork;
    }

    /**
     * Set frame
     *
     * @param string $frame
     *
     * @return Vehicle
     */
    public function setFrame($frame)
    {
        $this->frame = $frame;

        return $this;
    }

    /**
     * Get frame
     *
     * @return string
     */
    public function getFrame()
    {
        return $this->frame;
    }

    /**
     * Set owner
     *
     * @param string $owner
     *
     * @return Vehicle
     */
    public function setOwner($owner)
    {
        $this->owner = $owner;

        return $this;
    }

    /**
     * Get owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->owner;
    }

    /**
     * Set transmission
     *
     * @param string $transmission
     *
     * @return Vehicle
     */
    public function setTransmission($transmission)
    {
        $this->transmission = $transmission;

        return $this;
    }

    /**
     * Get transmission
     *
     * @return string
     */
    public function getTransmission()
    {
        return $this->transmission;
    }

    /**
     * Set tires
     *
     * @param string $tires
     *
     * @return Vehicle
     */
    public function setTires($tires)
    {
        $this->tires = $tires;

        return $this;
    }

    /**
     * Get tires
     *
     * @return string
     */
    public function getTires()
    {
        return $this->tires;
    }

    /**
     * Set alternateTires
     *
     * @param string $alternateTires
     *
     * @return Vehicle
     */
    public function setAlternateTires($alternateTires)
    {
        $this->alternateTires = $alternateTires;

        return $this;
    }

    /**
     * Get alternateTires
     *
     * @return string
     */
    public function getAlternateTires()
    {
        return $this->alternateTires;
    }

    /**
     * Set regionalAuthorization
     *
     * @param string $regionalAuthorization
     *
     * @return Vehicle
     */
    public function setRegionalAuthorization($regionalAuthorization)
    {
        $this->regionalAuthorization = $regionalAuthorization;

        return $this;
    }

    /**
     * Get regionalAuthorization
     *
     * @return string
     */
    public function getRegionalAuthorization()
    {
        return $this->regionalAuthorization;
    }

    /**
     * Set areation
     *
     * @param string $areation
     *
     * @return Vehicle
     */
    public function setAreation($areation)
    {
        $this->areation = $areation;

        return $this;
    }

    /**
     * Get areation
     *
     * @return string
     */
    public function getAreation()
    {
        return $this->areation;
    }

    /**
     * Set passengersSeated
     *
     * @param integer $passengersSeated
     *
     * @return Vehicle
     */
    public function setPassengersSeated($passengersSeated)
    {
        $this->passengersSeated = $passengersSeated;

        return $this;
    }

    /**
     * Get passengersSeated
     *
     * @return integer
     */
    public function getPassengersSeated()
    {
        return $this->passengersSeated;
    }

    /**
     * Set passengersStanding
     *
     * @param integer $passengersStanding
     *
     * @return Vehicle
     */
    public function setPassengersStanding($passengersStanding)
    {
        $this->passengersStanding = $passengersStanding;

        return $this;
    }

    /**
     * Get passengersStanding
     *
     * @return integer
     */
    public function getPassengersStanding()
    {
        return $this->passengersStanding;
    }

    /**
     * Set emergencyExits
     *
     * @param integer $emergencyExits
     *
     * @return Vehicle
     */
    public function setEmergencyExits($emergencyExits)
    {
        $this->emergencyExits = $emergencyExits;

        return $this;
    }

    /**
     * Get emergencyExits
     *
     * @return integer
     */
    public function getEmergencyExits()
    {
        return $this->emergencyExits;
    }

    /**
     * Set engineNumber
     *
     * @param string $engineNumber
     *
     * @return Vehicle
     */
    public function setEngineNumber($engineNumber)
    {
        $this->engineNumber = $engineNumber;

        return $this;
    }

    /**
     * Get engineNumber
     *
     * @return string
     */
    public function getEngineNumber()
    {
        return $this->engineNumber;
    }

    /**
     * Set omologationNumber
     *
     * @param string $omologationNumber
     *
     * @return Vehicle
     */
    public function setOmologationNumber($omologationNumber)
    {
        $this->omologationNumber = $omologationNumber;

        return $this;
    }

    /**
     * Get omologationNumber
     *
     * @return string
     */
    public function getOmologationNumber()
    {
        return $this->omologationNumber;
    }

    /**
     * Set maximumLoadMass
     *
     * @param string $maximumLoadMass
     *
     * @return Vehicle
     */
    public function setMaximumLoadMass($maximumLoadMass)
    {
        $this->maximumLoadMass = $maximumLoadMass;

        return $this;
    }

    /**
     * Get maximumLoadMass
     *
     * @return string
     */
    public function getMaximumLoadMass()
    {
        return $this->maximumLoadMass;
    }

    /**
     * Set category
     *
     * @param string $category
     *
     * @return Vehicle
     */
    public function setCategory($category)
    {
        $this->category = $category;

        return $this;
    }

    /**
     * Get category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * Set axesNumber
     *
     * @param integer $axesNumber
     *
     * @return Vehicle
     */
    public function setAxesNumber($axesNumber)
    {
        $this->axesNumber = $axesNumber;

        return $this;
    }

    /**
     * Get axesNumber
     *
     * @return integer
     */
    public function getAxesNumber()
    {
        return $this->axesNumber;
    }

    /**
     * Set engineCapacity
     *
     * @param integer $engineCapacity
     *
     * @return Vehicle
     */
    public function setEngineCapacity($engineCapacity)
    {
        $this->engineCapacity = $engineCapacity;

        return $this;
    }

    /**
     * Get engineCapacity
     *
     * @return integer
     */
    public function getEngineCapacity()
    {
        return $this->engineCapacity;
    }

    /**
     * Set powerKw
     *
     * @param integer $powerKw
     *
     * @return Vehicle
     */
    public function setPowerKw($powerKw)
    {
        $this->powerKw = $powerKw;

        return $this;
    }

    /**
     * Get powerKw
     *
     * @return integer
     */
    public function getPowerKw()
    {
        return $this->powerKw;
    }

    /**
     * Set fuel
     *
     * @param string $fuel
     *
     * @return Vehicle
     */
    public function setFuel($fuel)
    {
        $this->fuel = $fuel;

        return $this;
    }

    /**
     * Get fuel
     *
     * @return string
     */
    public function getFuel()
    {
        return $this->fuel;
    }

    /**
     * Set fireExtinguisherNumber
     *
     * @param string $fireExtinguisherNumber
     *
     * @return Vehicle
     */
    public function setFireExtinguisherNumber($fireExtinguisherNumber)
    {
        $this->fireExtinguisherNumber = $fireExtinguisherNumber;

        return $this;
    }

    /**
     * Get fireExtinguisherNumber
     *
     * @return string
     */
    public function getFireExtinguisherNumber()
    {
        return $this->fireExtinguisherNumber;
    }

    /**
     * Set fireExtinguisherExpiration
     *
     * @param \DateTime $fireExtinguisherExpiration
     *
     * @return Vehicle
     */
    public function setFireExtinguisherExpiration($fireExtinguisherExpiration)
    {
        $this->fireExtinguisherExpiration = $fireExtinguisherExpiration;

        return $this;
    }

    /**
     * Get fireExtinguisherExpiration
     *
     * @return \DateTime
     */
    public function getFireExtinguisherExpiration()
    {
        return $this->fireExtinguisherExpiration;
    }

    /**
     * Set notes
     *
     * @param string $notes
     *
     * @return Vehicle
     */
    public function setNotes($notes)
    {
        $this->notes = $notes;

        return $this;
    }

    /**
     * Get notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->notes;
    }

    /**
     * Add tachograph
     *
     * @param \AppBundle\Entity\Vehicle\Tachograph $tachograph
     *
     * @return Vehicle
     */
    public function addTachograph(\AppBundle\Entity\Vehicle\Tachograph $tachograph)
    {
        $this->tachographs[] = $tachograph;

        return $this;
    }

    /**
     * Remove tachograph
     *
     * @param \AppBundle\Entity\Vehicle\Tachograph $tachograph
     */
    public function removeTachograph(\AppBundle\Entity\Vehicle\Tachograph $tachograph)
    {
        $this->tachographs->removeElement($tachograph);
    }

    /**
     * Get tachographs
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTachographs()
    {
        return $this->tachographs;
    }

    /**
     * Add insurance
     *
     * @param \AppBundle\Entity\Vehicle\Insurance $insurance
     *
     * @return Vehicle
     */
    public function addInsurance(\AppBundle\Entity\Vehicle\Insurance $insurance)
    {
        $this->insurances[] = $insurance;

        return $this;
    }

    /**
     * Remove insurance
     *
     * @param \AppBundle\Entity\Vehicle\Insurance $insurance
     */
    public function removeInsurance(\AppBundle\Entity\Vehicle\Insurance $insurance)
    {
        $this->insurances->removeElement($insurance);
    }

    /**
     * Get insurances
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getInsurances()
    {
        return $this->insurances;
    }

    /**
     * Add carTax
     *
     * @param \AppBundle\Entity\Vehicle\CarTax $carTax
     *
     * @return Vehicle
     */
    public function addCarTax(\AppBundle\Entity\Vehicle\CarTax $carTax)
    {
        $this->carTaxes[] = $carTax;

        return $this;
    }

    /**
     * Remove carTax
     *
     * @param \AppBundle\Entity\Vehicle\CarTax $carTax
     */
    public function removeCarTax(\AppBundle\Entity\Vehicle\CarTax $carTax)
    {
        $this->carTaxes->removeElement($carTax);
    }

    /**
     * Get carTaxes
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCarTaxes()
    {
        return $this->carTaxes;
    }

    /**
     * Add carReview
     *
     * @param \AppBundle\Entity\Vehicle\CarReview $carReview
     *
     * @return Vehicle
     */
    public function addCarReview(\AppBundle\Entity\Vehicle\CarReview $carReview)
    {
        $this->carReviews[] = $carReview;

        return $this;
    }

    /**
     * Remove carReview
     *
     * @param \AppBundle\Entity\Vehicle\CarReview $carReview
     */
    public function removeCarReview(\AppBundle\Entity\Vehicle\CarReview $carReview)
    {
        $this->carReviews->removeElement($carReview);
    }

    /**
     * Get carReviews
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCarReviews()
    {
        return $this->carReviews;
    }

    /**
     * Add kmRead
     *
     * @param \AppBundle\Entity\Vehicle\KmRead $kmRead
     *
     * @return Vehicle
     */
    public function addKmRead(\AppBundle\Entity\Vehicle\KmRead $kmRead)
    {
        $this->kmReads[] = $kmRead;

        return $this;
    }

    /**
     * Remove kmRead
     *
     * @param \AppBundle\Entity\Vehicle\KmRead $kmRead
     */
    public function removeKmRead(\AppBundle\Entity\Vehicle\KmRead $kmRead)
    {
        $this->kmReads->removeElement($kmRead);
    }

    /**
     * Get kmReads
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getKmReads()
    {
        return $this->kmReads;
    }
}
